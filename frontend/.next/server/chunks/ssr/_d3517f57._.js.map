{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///Users/vivek/Desktop/Final_year_Project/Web_Interface/frontend/lib/appwrite.ts"],"sourcesContent":["import { Client, Storage } from \"appwrite\";\n\nconst client = new Client()\n  .setEndpoint(process.env.NEXT_PUBLIC_APPWRITE_ENDPOINT as string) // API endpoint\n  .setProject(process.env.NEXT_PUBLIC_APPWRITE_PROJECT_ID as string); // Project ID\n\nexport const storage = new Storage(client);\n"],"names":[],"mappings":";;;;AAAA;;AAEA,MAAM,SAAS,IAAI,wJAAM,GACtB,WAAW,uEAAsD,eAAe;CAChF,UAAU,4DAAyD,aAAa;AAE5E,MAAM,UAAU,IAAI,yJAAO,CAAC","debugId":null}},
    {"offset": {"line": 17, "column": 0}, "map": {"version":3,"sources":["file:///Users/vivek/Desktop/Final_year_Project/Web_Interface/frontend/app/page.tsx"],"sourcesContent":["\"use client\";\nimport { storage } from \"@/lib/appwrite\";\n\nexport default function UploadFile() {\n  async function handleUpload(e: React.ChangeEvent<HTMLInputElement>) {\n    if (!e.target.files) return;\n\n    const file = e.target.files[0];\n\n    try {\n      const response = await storage.createFile(\n        process.env.NEXT_PUBLIC_APPWRITE_BUCKET_ID as string,\n        \"unique()\",        \n        file\n      );\n\n      console.log(\"File uploaded:\", response);\n    } catch (err) {\n      console.error(\"Upload failed:\", err);\n    }\n  }\n\n  return <input type=\"file\" onChange={handleUpload} />;\n}\n"],"names":[],"mappings":";;;;;AACA;AADA;;;AAGe,SAAS;IACtB,eAAe,aAAa,CAAsC;QAChE,IAAI,CAAC,EAAE,MAAM,CAAC,KAAK,EAAE;QAErB,MAAM,OAAO,EAAE,MAAM,CAAC,KAAK,CAAC,EAAE;QAE9B,IAAI;YACF,MAAM,WAAW,MAAM,0HAAO,CAAC,UAAU,2DAEvC,YACA;YAGF,QAAQ,GAAG,CAAC,kBAAkB;QAChC,EAAE,OAAO,KAAK;YACZ,QAAQ,KAAK,CAAC,kBAAkB;QAClC;IACF;IAEA,qBAAO,8OAAC;QAAM,MAAK;QAAO,UAAU;;;;;;AACtC","debugId":null}}]
}